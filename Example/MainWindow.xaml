<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfApplication1"
        xmlns:ed="http://schemas.microsoft.com/expression/2010/drawing" x:Class="TapTrack.Demo.MainWindow"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:gif="http://wpfanimatedgif.codeplex.com"
        mc:Ignorable="d"
        WindowStartupLocation="CenterScreen"
        Title="Tappy Standalone Checkin Station Demo 3.0" Height="650" Width="800" Foreground="{x:Null}" Background="{StaticResource LightBackground}">
    <Grid Background="{StaticResource LightBackground}">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="71*"/>
            <ColumnDefinition Width="194*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="50"/>
            <RowDefinition Name="settingsContainer" Height="0"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <WrapPanel Grid.Row="0" HorizontalAlignment="Left" Grid.ColumnSpan="2">
            <TextBlock Margin="10" FontSize="20" Foreground="White">TapTrack Tappy NFC Checkin Station</TextBlock>
        </WrapPanel>
        <WrapPanel Grid.Row="0" HorizontalAlignment="Right" Grid.Column="1" Margin="0,0,0.2,0" >
            <Button Margin="10" Height="15" Padding="0" Background="White" BorderBrush="{x:Null}" Style="{StaticResource StopButton}" Click="StopButton_Click"/>
            <Button Name="autoDetectButton" Margin="10" Height="25" Padding="0" Background="{x:Null}" BorderBrush="{x:Null}" Style="{StaticResource USBButton}" Click="AutoDetectButton_Click"/>
            <Button Margin="10" Height="25" Style="{StaticResource DisconnectButton}" Click="disconnectButton_Click"  Content="Disconnect"/>
            <Button Margin="10" Height="25" Padding="0" Background="{x:Null}" BorderBrush="{x:Null}" Style="{StaticResource SettingsButton}" Click="SettingsButton_Click"/>
        </WrapPanel>
        <Border Grid.Row="1" Background="{StaticResource LightBackground}" Grid.ColumnSpan="2" Margin="0,0,0.2,572.8" Grid.RowSpan="2">
            <StackPanel Orientation="Vertical">
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                    <Label Margin="10,10,0,0" Padding="0,0,0,10" Foreground="White" Content="Timeout"/>
                    <TextBlock Margin="5,0,0,0" VerticalAlignment="Center" >
                        <Hyperlink Foreground="White" ToolTip="Timeout is in secs. 0 = no timeout">
                            ?
                        </Hyperlink>
                    </TextBlock>
                    <xctk:IntegerUpDown Name="timeout" Margin="10,5,0,5" FormatString="N0" Value="0" Increment="1" Minimum="0" Maximum="255"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                    <CheckBox Name="lockCheckBox"  VerticalAlignment="Center" Margin="10,0,0,0" IsChecked="False"></CheckBox>
                    <Label Foreground="White" Content="Lock after writing"/>
                </StackPanel>
            </StackPanel>
        </Border>
        <Popup Name="statusPopup" Placement="Center" Grid.Row="2" Height="Auto" MinWidth="175" Width="Auto" PopupAnimation="Fade" Grid.ColumnSpan="2" Margin="0,0,0.2,-0.2">
            <Border CornerRadius="1" BorderBrush="Gray" BorderThickness="2" Background="{StaticResource DarkBackground}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition Name="dismissButtonContainer" Height="0"/>
                    </Grid.RowDefinitions>

                    <StackPanel Orientation="Vertical" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Row="0">
                        <StackPanel Margin="0,20,0,0" Orientation="Horizontal" HorizontalAlignment="Center" >
                            <Label Name="statusText" FontSize="15" VerticalAlignment="Center" Foreground="White"/>
                            <Image Name="statusImage" Height="30" gif:ImageBehavior.AnimatedSource="{x:Null}" />
                        </StackPanel>
                        <Label Name="statusMessage" Padding="10,0,10,10" FontSize="10" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="White"/>
                    </StackPanel>

                    <Button Name="dismissButton" HorizontalAlignment="Center" Visibility="Hidden" Grid.Row="1" Style="{StaticResource RoundButton}" Click="DismissButton_Click">Dismiss</Button>
                </Grid>
            </Border>
        </Popup>
        <TabControl Padding="0" Grid.Row="2" ItemContainerStyle="{StaticResource SimpleTabItem}" BorderBrush="#FF15AAFF" Background="{x:Null}" BorderThickness="0,2,0,0" Foreground="{x:Null}" Grid.ColumnSpan="2" Margin="0,0,0.2,-0.2">
            <TabControl.Resources>
                <Style TargetType="{x:Type Grid}">
                    <Setter Property="Background" Value="{StaticResource LightBackground}"/>
                </Style>
                <Style TargetType="{x:Type TabPanel}">
                    <Setter Property="HorizontalAlignment" Value="Left"/>
                </Style>
            </TabControl.Resources>
            <TabItem Header="Download">
                <TabControl Padding="0" TabStripPlacement="Left" Background="{x:Null}" BorderThickness="0">
                    <TabControl.Resources>
                        <Style TargetType="{x:Type Grid}">
                            <Setter Property="Background" Value="White"/>
                        </Style>
                        <Style TargetType="{x:Type TabPanel}">
                            <Setter Property="VerticalAlignment" Value="Top"/>
                        </Style>
                    </TabControl.Resources>
                    <TabItem Style="{StaticResource DownloadCheckins}">
                        <StackPanel Background="{StaticResource DarkBackground}" Orientation="Vertical">
                            <StackPanel Margin="10">
                                <TextBlock Foreground="White" TextWrapping="Wrap" FontSize="20" Margin="0,0,0,10">
                                    Download checkins
                                </TextBlock>
                                <TextBlock Foreground="White" TextWrapping="Wrap">
                                     This allows you to download checkins currently stored on the Tappy.
                                </TextBlock>
                            </StackPanel>
                            <WrapPanel Margin="10" Orientation="Horizontal" HorizontalAlignment="Right">
                                <Button Style="{StaticResource RoundButton}" Click="DownloadCheckinsClick">Download Checkins</Button>
                            </WrapPanel>
                        </StackPanel>
                    </TabItem>
                    <TabItem Style="{StaticResource GetNumCheckins}">
                        <StackPanel Background="{StaticResource DarkBackground}" Orientation="Vertical">
                            <StackPanel Margin="10">
                                <TextBlock Foreground="White" TextWrapping="Wrap" FontSize="20" Margin="0,0,0,10">
                                    Get the number of checkins
                                </TextBlock>
                                <TextBlock Foreground="White" TextWrapping="Wrap">
                                    This allows you to query from the Tappy how many checkins it currently stores.
                                </TextBlock>
                            </StackPanel>
                            <Button Name="getNumCheckins" Margin="10" HorizontalAlignment="Right" Style="{StaticResource RoundButton}" Click="GetNumCheckins_Click">Get Number of Checkins</Button>
                        </StackPanel>
                    </TabItem>
                    <TabItem Style="{StaticResource ResetCheckins}">
                        <ScrollViewer VerticalScrollBarVisibility="Auto">
                            <StackPanel Background="{StaticResource DarkBackground}" Orientation="Vertical">
                                <StackPanel Margin="10">
                                    <TextBlock Foreground="White" TextWrapping="Wrap" FontSize="20" Margin="0,0,0,10">
                                        Reset checkins
                                    </TextBlock>
                                    <TextBlock Foreground="White" TextWrapping="Wrap">
                                        This allows you to erase the checkins currently stored in the Tappy.  Ensure you've downloaded/exported the checkins before resetting them
                                    </TextBlock>
                                </StackPanel>
                                <Button Name="resetCheckins" Margin="10" HorizontalAlignment="Right" Style="{StaticResource RoundButton}" Click="ResetCheckins_Click">Reset</Button>
                            </StackPanel>
                        </ScrollViewer>
                    </TabItem>
                </TabControl>
            </TabItem>
            <TabItem Header="Checkins">
                <TabControl Padding="0" TabStripPlacement="Left" Background="{x:Null}" BorderThickness="0">
                    <TabControl.Resources>
                        <Style TargetType="{x:Type Grid}">
                            <Setter Property="Background" Value="White"/>
                        </Style>
                        <Style TargetType="{x:Type TabPanel}">
                            <Setter Property="VerticalAlignment" Value="Top"/>
                        </Style>
                    </TabControl.Resources>
                    <TabItem Name="tiCheckinView" Style="{StaticResource WriteMultiTab}" Loaded="tiCheckinView_Loaded">
                        <Grid  Background="{StaticResource DarkBackground}" Height="{Binding Path=Height, RelativeSource={RelativeSource Mode=FindAncestor, 
                                 AncestorType={x:Type TabItem}}}" >
                            <Grid.RowDefinitions>
                                <RowDefinition Height="50"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>

                            <TextBlock Foreground="White" TextWrapping="Wrap" FontSize="20" Margin="10">
                                    Dowloaded Checkins
                            </TextBlock>

                            <DataGrid Background="{x:Null}" Name="dgCheckins" ItemsSource="{Binding}" AutoGenerateColumns="False" 
										  Foreground="White" FontSize="14" Margin="10,40,0,29.8" HorizontalAlignment="Left" RowHeaderWidth="0" IsReadOnly="true" Grid.RowSpan="2">
                                <DataGrid.Resources>
                                    <Style TargetType="{x:Type DataGridColumnHeader}">
                                        <Setter Property="Background" Value="{StaticResource AccentHighLightDark}"/>
                                        <Setter Property="BorderBrush" Value="{StaticResource LightBackground}"/>
                                        <Setter Property="BorderThickness" Value="1"/>
                                    </Style>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Setter Property="Background" Value="{StaticResource DarkBackground}"/>
                                        <Setter Property="BorderBrush" Value="{StaticResource LightBackground}"/>
                                        <Style.Triggers>
                                            <Trigger Property="IsSelected" Value="True">
                                                <Setter Property="Background" Value="{StaticResource LightBackground}"/>
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Background" Value="{StaticResource LightBackground}"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGrid.Resources>
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="Tag Code" Binding="{Binding tagCode}" Width="200"/>
                                    <DataGridTextColumn Header="Timestamp" Binding="{Binding timestamp}" Width="150"/>
                                    <DataGridTextColumn Header="Station Name" Binding="{Binding stationName}" Width="225"/>
                                    <DataGridTextColumn Header="Station Code" Binding="{Binding stationCode}" Width="100"/>
                                </DataGrid.Columns>
                            </DataGrid>
                        </Grid>
                    </TabItem>
                    <TabItem Style="{StaticResource ExportRecords}">
                        <StackPanel  Background="{StaticResource DarkBackground}" Orientation="Vertical">
                            <StackPanel Margin="10">
                                <TextBlock Foreground="White" TextWrapping="Wrap" FontSize="20">
                                    Export Checkins
                                </TextBlock>
                                <TextBlock Foreground="White" TextWrapping="Wrap">
                                    This tab allows you to export the checkins that have been downloaded.
                                </TextBlock>
                            </StackPanel>

                            <StackPanel Orientation="Horizontal" Margin="624,0,0.2,0">
                                <Button Name="exportCSV" Style="{StaticResource RoundButton}" Click="ExportCSV_Click">Export CSV</Button>
                            </StackPanel>
                        </StackPanel>
                    </TabItem>
                    <TabItem Style="{StaticResource Analytics}">
                        <DockPanel Background="{StaticResource DarkBackground}">
                            <Grid DockPanel.Dock="Bottom" Background="{x:Null}">
                                <WrapPanel HorizontalAlignment="Left" VerticalAlignment="Center">
                                    <Button Name="countRowsByTagCodeButton" Style="{StaticResource RoundButton}" Click="CountRowsByTagCodeButton_Click">Count by tag code</Button>
                                </WrapPanel>
                            </Grid>
                            <StackPanel Margin="10" DockPanel.Dock="Top">
                                <TextBlock Foreground="White" TextWrapping="Wrap" FontSize="20" Margin="0,0,0,10">
                                    Perform simple analytics
                                </TextBlock>
                                <TextBlock Foreground="White" TextWrapping="Wrap">
                                    Run simple queries and analyses onthe downloaded checkins.
                                </TextBlock>
                            </StackPanel>
                            <DataGrid Name="records" ItemsSource="{Binding}" Background="{x:Null}" AutoGenerateColumns="False" Margin="10" Foreground="White" Visibility="Collapsed">
                                <DataGrid.RowHeaderWidth>0</DataGrid.RowHeaderWidth>
                                <DataGrid.Resources>
                                    <Style TargetType="{x:Type DataGridColumnHeader}">
                                        <Setter Property="Background" Value="{StaticResource AccentHighLightDark}"/>
                                        <Setter Property="BorderBrush" Value="{StaticResource LightBackground}"/>
                                        <Setter Property="BorderThickness" Value="1"/>
                                    </Style>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Setter Property="Background" Value="{StaticResource DarkBackground}"/>
                                        <Setter Property="BorderBrush" Value="{StaticResource LightBackground}"/>
                                        <Style.Triggers>
                                            <Trigger Property="IsSelected" Value="True">
                                                <Setter Property="Background" Value="{StaticResource LightBackground}"/>
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Background" Value="{StaticResource LightBackground}"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGrid.Resources>
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="Tag Code" Binding="{Binding TagCode}" Width="250"/>
                                    <DataGridTextColumn Header="Count" Binding="{Binding Count}" Width="100"/>
                                </DataGrid.Columns>
                            </DataGrid>
                            <DataGrid Grid.Row="1" Background="{x:Null}" Name="dgTagCodeCount" ItemsSource="{Binding}" AutoGenerateColumns="False" 
										  Foreground="White" FontSize="14" Margin="10" HorizontalAlignment="Left" RowHeaderWidth="0"
										  IsReadOnly="True">
                                <DataGrid.Resources>
                                    <Style TargetType="{x:Type DataGridColumnHeader}">
                                        <Setter Property="Background" Value="{StaticResource AccentHighLightDark}"/>
                                        <Setter Property="BorderBrush" Value="{StaticResource LightBackground}"/>
                                        <Setter Property="BorderThickness" Value="1"/>
                                    </Style>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Setter Property="Background" Value="{StaticResource DarkBackground}"/>
                                        <Setter Property="BorderBrush" Value="{StaticResource LightBackground}"/>
                                        <Style.Triggers>
                                            <Trigger Property="IsSelected" Value="True">
                                                <Setter Property="Background" Value="{StaticResource LightBackground}"/>
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Background" Value="{StaticResource LightBackground}"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGrid.Resources>
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="Tag code" Binding="{Binding TagCode}" Width="200"/>
                                    <DataGridTextColumn Header="Count" Binding="{Binding Count}" Width="50"/>
                                    <DataGridTextColumn Header="String descriptor(name)" Binding="{Binding StringDescriptor}" Width="250"/>
                                    <DataGridTextColumn Header="Id" Binding="{Binding IdString}" Width="150"/>
                                </DataGrid.Columns>
                            </DataGrid>
                        </DockPanel>
                    </TabItem>
                    <TabItem Style="{StaticResource DeleteStoredCheckins}">
                        <ScrollViewer VerticalScrollBarVisibility="Auto">
                            <StackPanel Background="{StaticResource DarkBackground}" Orientation="Vertical">
                                <StackPanel Margin="10">
                                    <TextBlock Foreground="White" TextWrapping="Wrap" FontSize="20" Margin="0,0,0,10">
                                        Delete stored checkins
                                    </TextBlock>
                                    <TextBlock Foreground="White" TextWrapping="Wrap">
                                        This allows you to erase the checkins currently downloaded and stored in database.
                                    </TextBlock>
                                </StackPanel>
                                <Button Name="deleteStoredCheckins" Margin="10" HorizontalAlignment="Right" Style="{StaticResource RoundButton}" Click="DeleteStoredCheckins_Click">Delete Stored Checkins</Button>
                            </StackPanel>
                        </ScrollViewer>
                    </TabItem>
                </TabControl>
            </TabItem>
            <TabItem Header="Checkin Tags">
                <TabControl Padding="0" TabStripPlacement="Left" Background="{x:Null}" BorderThickness="0">
                    <TabControl.Resources>
                        <Style TargetType="{x:Type Grid}">
                            <Setter Property="Background" Value="White"/>
                        </Style>
                        <Style TargetType="{x:Type TabPanel}">
                            <Setter Property="VerticalAlignment" Value="Top"/>
                        </Style>
                    </TabControl.Resources>
                    <TabItem Name="tiViewCheckinTags" Style="{StaticResource ViewCheckinTags}" Loaded="tiViewCheckinTags_Loaded">
                        <StackPanel Background="{StaticResource DarkBackground}">
                            <StackPanel Margin="10" DockPanel.Dock="Top">
                                <TextBlock Foreground="White" TextWrapping="Wrap" FontSize="20" Margin="0,0,0,10">
                                    View Checkin Tags
                                </TextBlock>
                                <TextBlock Foreground="White" TextWrapping="Wrap">
                                    This displays a list of checkin tag codes associated with a desciption such as a name and an optional non-unique string identifier such as an employee number.
                                </TextBlock>
                            </StackPanel>
                            <DataGrid Grid.Row="1" Background="{x:Null}" Name="dgCheckinTags" ItemsSource="{Binding}" AutoGenerateColumns="False" 
										  Foreground="White" FontSize="14" Margin="10,10,0,10" HorizontalAlignment="Left" RowHeaderWidth="0" Height="398">
                                <DataGrid.Resources>
                                    <Style TargetType="{x:Type DataGridColumnHeader}">
                                        <Setter Property="Background" Value="{StaticResource AccentHighLightDark}"/>
                                        <Setter Property="BorderBrush" Value="{StaticResource LightBackground}"/>
                                        <Setter Property="BorderThickness" Value="1"/>
                                    </Style>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Setter Property="Background" Value="{StaticResource DarkBackground}"/>
                                        <Setter Property="BorderBrush" Value="{StaticResource LightBackground}"/>
                                        <Style.Triggers>
                                            <Trigger Property="IsSelected" Value="True">
                                                <Setter Property="Background" Value="{StaticResource LightBackground}"/>
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Background" Value="{StaticResource LightBackground}"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGrid.Resources>
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="Tag Code" Binding="{Binding TagCode}" Width="200"/>
                                    <DataGridTextColumn Header="String Description (name)" Binding="{Binding StringDescriptor}" Width="350"/>
                                    <DataGridTextColumn Header="Id" Binding="{Binding IdString}" Width="150"/>
                                </DataGrid.Columns>
                            </DataGrid>
                        </StackPanel>
                    </TabItem>
                    <TabItem Style="{StaticResource ImportCheckinTags}">
                        <StackPanel Background="{StaticResource DarkBackground}">
                            <StackPanel Margin="10" DockPanel.Dock="Top">
                                <TextBlock Foreground="White" TextWrapping="Wrap" FontSize="25" Margin="0,0,0,10">
                                    Import String Mappings
                                </TextBlock>
                                <TextBlock Foreground="White" TextWrapping="Wrap">
                                    Import a CSV file with tag codes associated with ID numbers and strings such as names or titles.
                                </TextBlock>
                                <TextBlock Foreground="White" TextWrapping="Wrap">
                                   Format of the CSV is tagCode,StringDescriptor,IdNum.  The first line of the file is ignored.
                                </TextBlock>
                                <TextBlock Foreground="White" TextWrapping="Wrap" FontSize="20" Margin="0,0,0,10">
                                    Example record
                                </TextBlock>
                                <TextBlock Foreground="White" TextWrapping="Wrap">
                                       tag code (factory UID) = 040F31A2A94A81
                                </TextBlock>
                                <TextBlock Foreground="White" TextWrapping="Wrap">
                                       Description = "Vote for candidate A"
                                </TextBlock>
                                <TextBlock Foreground="White" TextWrapping="Wrap">
                                       ID = 0001
                                </TextBlock>
                                <TextBlock Foreground="White" TextWrapping="Wrap">
                                    <LineBreak></LineBreak>
                                       04-0F-31-A2-A9-4A-81,Vote for candidate A,0001
                                </TextBlock>
                            </StackPanel>
                            <Button HorizontalAlignment="Right" Style="{StaticResource RoundButton}" Click="importStringMappingButton_Click">
                                Import CSV File
                            </Button>
                        </StackPanel>
                    </TabItem>
                </TabControl>
            </TabItem>
            <TabItem Header="Settings">
                <TabControl Padding="0" TabStripPlacement="Left" Background="{x:Null}" BorderThickness="0">
                    <TabControl.Resources>
                        <Style TargetType="{x:Type Grid}">
                            <Setter Property="Background" Value="White"/>
                        </Style>
                        <Style TargetType="{x:Type TabPanel}">
                            <Setter Property="VerticalAlignment" Value="Top"/>
                        </Style>
                    </TabControl.Resources>
                    <TabItem Style="{StaticResource VersionTab}">
                        <StackPanel Background="{StaticResource DarkBackground}" Orientation="Vertical">
                            <TextBlock Margin="10" Foreground="White">Firmware Version</TextBlock>
                            <TextBox Name="firmwareTextBox" Style="{StaticResource TextBox}"/>
                            <Button Margin="0,0,10,0" Style="{StaticResource RoundButton}" HorizontalAlignment="Right" Click="firmwareVersionButton_Click">Get Firmware Version</Button>
                            <TextBlock Margin="10" Foreground="White">Hardware Version</TextBlock>
                            <TextBox Name="hardwareTextBox" Style="{StaticResource TextBox}"/>
                            <Button Margin="0,0,10,0" Style="{StaticResource RoundButton}" HorizontalAlignment="Right" Click="hardwareVersionButton_Click">Get Hardware Version</Button>
                        </StackPanel>
                    </TabItem>
                    <TabItem Name="batteryTab" Style="{StaticResource BatteryTab}">
                        <StackPanel Background="{StaticResource DarkBackground}">
                            <TextBlock Margin="10" Foreground="White">Battery Level</TextBlock>
                            <TextBox Name="batteryTextBox" Style="{StaticResource TextBox}"/>
                            <Button Margin="0,0,10,0" Style="{StaticResource RoundButton}" HorizontalAlignment="Right" Click="batteryButton_Click">Get Battery Level</Button>
                        </StackPanel>
                    </TabItem>
                </TabControl>
            </TabItem>

        </TabControl>
    </Grid>
</Window>
